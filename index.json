[{"content":"不同编程语言有不同的方式进行注释 在你的代码中添加注释是一个很好的做法，因为它使你的代码更具有可读性，易于理解。 注释不会运行，因为它们会被编译器和解释器忽略。 总结起来，基本就是 // # /** */ ，实在不行，遍历 （逃） vue 一、template 标签中的注释 二、 style标签中的注释 /*\r多行注释\r*/ 三、script标签中的注释 // 单行注释\r/*\r多行注释\r多行注释\r*/ 四、方法注释规范 vue文件中method中的方法注释 /**\r* @description: 方法描述\r* @param {参数类型} 参数名称\r* @param {参数类型} 参数名称\r* @return 没有返回信息写 void / 有返回信息 {返回类型} 描述信息\r*/ 五、文件注释规范 单个文件注释规范，每个独立的VUE文件开头都要进行注释，表明该文件的描述信息、作者、创建时间等。 C, C++, Java, Kotlin, and Rust C /** this is a multiline comment or comment block */ // C99 uses the single-line comment CPP /** same as C-style comment block */ // single line comment Java // same as C . . . ! /** all the same */ Kotlin /** * might as well include Kotlin! */ Rust // rust comments are like C #! cargo documentation comments JavaScript, Python, Ruby, Perl, PHP, and BASH Javascript // JS is also like Java, but more dynamic /* Notice there's only 1 star on the leading comment symbol? C/C++ and Java use 2 stars */ Python # Its a pound sign, or hash tag, or octothorpe, or a musical sharp symbol \"\"\" a multilin string comment literal thing \"\"\" Ruby # hey its another scripting language hash tag comment symbol Perl # a language known for its regex capacity and one-liners Bash # similar to python PHP // c style one line comment # shell style one line comment /* a multi line comment */ HTML and CSS HTML CSS /* here we go again */ // we don't deal with GLSL shader langauges much, but here it is ; comment with a semicolon, MIPS assembly is similar 参考资料 Comment out HTML wiki gist ","title":"如何对代码进行注释","uri":"/notes/comment-out/"},{"content":"缘起 疫情三年，没出过一次远门。娃终于肯和爷爷奶奶单独呆上一周了，那起飞吧~~~\n日程安排 D0 D1 晚机落地成都双流机场，一天多悠闲逛逛成都 D2 D3 黄龙九寨沟两天一夜，住在九寨沟一晚上 D4 23点回到成都，博物馆的一天，早上成博，下午三星堆博物馆 D5 峨眉山一天，晚上回到成都 D6 吃饱补觉的悠闲 13：30天府机场起飞回深圳 印象最深 看雪玩冰，漫天白茫茫真爽 第一次看真雪技能解锁。在大成都市区也能大雪纷飞，本地人也说好久没下这么大雪了。被我一个南方小土豆第一次来就撞上了。 银装素裹的世界，万物都披上一层或厚或薄的外衣，生命的形态在冰雪中再次蜕变，千姿百态。\n黄龙真的离成都好远。至少7小时的大巴车，还是很多盘山公路，屁股真的坐痛了。海拔真的很高，随便就3000+，本身没高原反应，在地上大力翻滚和大口喝水后，在前往九寨沟的山路车上竟然有点晕。原来流水不腐真的不是骗人的，流水还不冷，气温零下竟然地表水还不结冰。可能有地下水往上冒，带着千年前的熔岩温度。\n九寨沟真的舒服，海拔只有2500左右。能去黄龙绝对能去九寨沟了。三条沟完美刷完，不听导游的，我和老婆动作快一点，刷完全程。虽然最后赶车，打出租车一公里15元（也懒得和司机扯打表那些了）。风景绝美啊，有瀑布六亲不认每时每刻飞泻而下，有冰封整个湖霸气朴实无华，有小树枝结个冰晶迎着阳光闪耀着，有翡冷翠撞着洁白混些蓝天的调色盘，有免费和雪山天天拍照的清澈湖水，有波光粼粼随风摇曳的湖面，有稳如泰山只留灰白背影的高冷高山。\n爬峨眉山真不容易，大雪天已经买了全套观光车+来回索道，只需走一小段，从雷洞坪到金顶的索道之间的上山路，硬是歇了几次才能爬完。不敢相信徒步夜爬从山脚登顶的勇士的毅力。峨眉山是一路把下雪贯彻到底，刚从山脚开始就飘起大雪，整个山完成沉浸在仙气缭绕雪白中。金顶好震撼，佛门圣地。上山猴子都藏起来了，没想到，下山竟然跑出来了，也算尽了一点地主之谊哈哈哈。PS：一定要买冰爪（虽然半山买的20元，也荣膺最有价值的装备），沿路不用买雨衣，根本就是飘雪好吗？被雪砸不幸福吗？还穿啥！\n专属博物馆的一天太有眼福了，历史盛宴，文化冲击时空碰撞。成都博物馆介绍整个蜀国历史，厚重的底蕴，一首《成都》又唤醒新时代流量密码。成都名不虚传。特别是三星堆，全程基本都在拍拍拍。这人流量爆炸，有研学的有整个团的，简直就是市场一样火爆。这是三四千年前的人能创造出来的吗？简直了，哪怕再过500年，先不说审美水平，光是要复刻这些产品技术难度还是太大。与金字塔古巴比伦又有什么联系呢？人类还是有太多未解之谜，也许这也是进步的动力吧。\n后记 大四川真的不愧是天府之国，盆地、平原、高山、冰川和湖泊啥的应有尽有，还可以刷几次的旅游圣地。下次争取自驾川西，为西藏铺垫铺垫哈。 成都小吃可以再挖掘一下，专门找一些巷子地道好吃，不去网红店 带娃必去熊猫基地，这次没去留个伏笔啦~ 黄龙九寨沟和三星堆太多野导游假解说了，到处兜售。观感超级不好。 ","title":"成都游记","uri":"/life/chengdu.zh-cn/"},{"content":"溯源 Hugo uses Chroma as its code highlighter; it is built in Go and is really, really fast.\n既然内建了，秉持极简主义的原则，毕竟够用就好。那就Chroma吧\n清理原来的 原来config.toml 自带有这段代码，也起着高亮的作用。必须先删掉。\npaginate = 6 - pygmentsCodeFences = true - pygmentsCodefencesGuessSyntax = true - pygmentsUseClasses = true 新配置 再加入\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 [markup] [markup.highlight] anchorLineNos = false codeFences = true guessSyntax = false hl_Lines = '' hl_inline = false lineAnchors = '' lineNoStart = 1 lineNos = false lineNumbersInTable = true noClasses = true noHl = false style = 'monokai' tabWidth = 4 最终呈现\nbaseURL = \"https://ooim.xyz\" languageCode = \"zh-cn\" theme = \"jingzhe\" themesDir = \"themes\" title = \"或跃在渊\" paginate = 6 enableRobotsTXT = true paginate = 6 - pygmentsCodeFences = true - pygmentsCodefencesGuessSyntax = true - pygmentsUseClasses = true [markup] + [markup.highlight] + anchorLineNos = false + codeFences = true + guessSyntax = false + hl_Lines = '' + hl_inline = false + lineAnchors = '' + lineNoStart = 1 + lineNos = false + lineNumbersInTable = true + noClasses = true + noHl = false + style = \"gruvbox\" + tabWidth = 4 更多的style\nReference 官方1 官方2 ","title":"Hugo 内建 highlight 配置踩坑","uri":"/notes/hugo-highlight/"},{"content":"还是喜欢一波流，docker真香\nversion: '3' services: umami: image: ghcr.io/umami-software/umami:postgresql-latest ports: - \"3000:3000\" environment: DATABASE_URL: postgresql://umami:umami@db:5432/umami DATABASE_TYPE: postgresql APP_SECRET: replace-me-with-a-random-string depends_on: db: condition: service_healthy restart: always db: image: postgres:15-alpine environment: POSTGRES_DB: umami POSTGRES_USER: umami POSTGRES_PASSWORD: umami volumes: - umami-db-data:/var/lib/postgresql/data restart: always healthcheck: test: [\"CMD-SHELL\", \"pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}\"] interval: 5s timeout: 5s retries: 5 volumes: umami-db-data: 后续绑定域名，反代端口3000 就可以舒服享受啦~\n","title":"部署自建网站统计服务umami","uri":"/notes/deploy-umami/"},{"content":"买入绿联NAS后，再解锁docker技能后，玩法丰富了太多。部署在NAS的各种容器，为了能方便外网访问，在这个公网ip紧缺的时代，能实现内网穿透尤为重要。 而 frp 则是一个开源的常见解决方案。\nfrp 是一款高性能的反向代理应用，专注于内网穿透。它支持多种协议，包括 TCP、UDP、HTTP、HTTPS 等，并且具备 P2P 通信功能。使用 frp，您可以安全、便捷地将内网服务暴露到公网，通过拥有公网 IP 的节点进行中转。\n本质分析 通过公网服务器部署的frps，利用frpc把客户端的请求反向代理寻址访问到正确的服务地址，从而实现frps-frpc之间的流量转发。\n部署服务端 下载frps 通过官方release下载服务器合适版本，如frp_0.53.2_linux_amd64.tar.gz，然后解压\n创建服务端配置文件 nano ./frps.toml 比较简单实用的配置\n# This configuration file is for reference only. Please do not use this configuration directly to run the program as it may have various issues. # A literal address or host name for IPv6 must be enclosed # in square brackets, as in \"[::1]:80\", \"[ipv6-host]:http\" or \"[ipv6-host%zone]:80\" # For single \"bindAddr\" field, no need square brackets, like `bindAddr = \"::\"`. bindAddr = \"0.0.0.0\" //服务器ip 默认这个就行 bindPort = 7000 //绑定端口 # Heartbeat configure, it's not recommended to modify the default value # The default value of heartbeatTimeout is 90. Set negative value to disable it. # transport.heartbeatTimeout = 90 # Pool count in each proxy will keep no more than maxPoolCount. transport.maxPoolCount = 5 # transport.tls.force specifies whether to only accept TLS-encrypted connections. By default, the value is false. tls.force = false vhostHTTPPort = 8080 //多个虚拟主机访问端口 # Response header timeout(seconds) for vhost http server, default is 60s # vhostHTTPTimeout = 60 # Configure the web server to enable the dashboard for frps. # dashboard is available only if webServer.port is set. webServer.addr = \"127.0.0.1\" //web管理url webServer.port = 7500 //对应访问端口 webServer.user = \"admin\" //管理员用户名 webServer.password = \"admin\" //管理员密码 # Enable golang pprof handlers in dashboard listener. # Dashboard port must be set first webServer.pprofEnable = false # enablePrometheus will export prometheus metrics on webServer in /metrics api. enablePrometheus = true # console or real logFile path like ./frps.log log.to = \"./frps.log\" # trace, debug, info, warn, error log.level = \"info\" log.maxDays = 3 # disable log colors when log.to is console, default is false log.disablePrintColor = false # DetailedErrorsToClient defines whether to send the specific error (with debug info) to frpc. By default, this value is true. detailedErrorsToClient = true # auth.method specifies what authentication method to use authenticate frpc with frps. # If \"token\" is specified - token will be read into login message. # If \"oidc\" is specified - OIDC (Open ID Connect) token will be issued using OIDC settings. By default, this value is \"token\". auth.method = \"token\" //frps-frpc通讯验证方式 # auth token auth.token = \"12345678\" //一串随机数，但要保证客户端也一样 # Max ports can be used for each client, default value is 0 means no limit maxPortsPerClient = 0 # If subDomainHost is not empty, you can set subdomain when type is http or https in frpc's configure file # When subdomain is est, the host used by routing is test.frps.com subDomainHost = \"frps.com\" //多个虚拟主机(域名)的主域名 启动服务端 nohub ./frps -c ./frps.toml \u0026\n可以用 netstat -ntpl 检查上述绑定的各种端口是否已经建立\n部署客户端 创建客户端配置文件 提前把 frpc.ini 配置好，保存在NAS某个文件夹中，参考配置如下：\n[common] server_addr = x.x.x.x //公网vps地址 server_port = 7000 //之前服务端绑定的端口 token = 12345678 //与服务端必须一样，不然连不通 #log_file = /dev/null #log_level = info #log_max_days = 3 // 每创建一个proxy就建一个[ ] [books] type = tcp local_ip = 192.168.3.226 local_port = 7070 remote_port = 5115 //tcp这个类别可以指定远程服务端端口 [bt] type = http local_ip = 192.168.3.226 local_port = 8080 subdomain = mybt [jellyfin] type = http local_ip = 192.168.3.226 local_port = 11301 subdomain = movie 新建容器 在绿联的docker中搜索frpc镜像（如stilleshan/frpc:latest），拉取到本地后新建容器，记得存储空间要把frpc.ini路径挂载为/frp/frpc.ini 最后启动容器。查看日志，看是否连接服务端，通讯是否成功。\n测试 访问 vpsip:7500 查看是否相关proxy都是online的，在线才证明成功连接上。\nENJOY 尽情享受，访问 subdomain.frps.com:8080 即可获取NAS部署在内网的各种服务和容器。\nvpsip:5115 即是 192.168.3.226:7070 这个服务 mybt.frps.com:8080 即是 192.168.3.226:8080 这个服务 movie.frps.com:8080 即是 192.168.3.226:11301这个服务 ","title":"绿联NAS部署 frp 实现内网穿透","uri":"/notes/deploy-frp-nas/"},{"content":"好早之前就已经喜欢这个字体，不太呆板同时又不失灵动。\n前情提要 想着在 Hugo 博客里面调用，一开始只找到这个issues讨论，但还是不适合。最后发现这篇Tony Xu Blog，借鉴一下，终于搞定。\n以下方法是基于 meme 这个主题框架\n实现方法 在站点的css文件中引入 // /assets/scss/custom/_custom.scss @import url(\"https://cdnjs.cloudflare.com/ajax/libs/lxgw-wenkai-screen-webfont/1.7.0/lxgwwenkaiscreen.min.css\"); 在config.yaml或body中进行调用 fontFamilyBody = \"'LXGW WenKai Screen', 'Palatino Linotype', serif\" { font-family: \"LXGW WenKai Screen\", sans-serif; } 必要的话里面每个 font-family 都进行调用\n参考资料库 落霞孤鹜开源字体霞鹜文楷 CDN 感谢 chawyehsu lxgw-wenkai-webfont ","title":"Hugo 使用落霞孤鹜文楷字体","uri":"/notes/hugo-lxgw-font/"},{"content":"突然发现无法使用 git@github.com:user/repo 推送或拉取代码了，之前明明可以。证明抽风了。解决方法只能上代理，晕啊。\n方法一 创建 ~/.ssh/config Host github.com User git ProxyCommand connect -H 127.0.0.1:10809 %h %p 这是要求走http代理的设置，把端口改为你的代理端口\n另一种是换成这个，强制走443端口利用https协议\nHost github.com Hostname ssh.github.com Port 443 方法二 设置全局代理 git config –global http.proxy protocol://127.0.0.1:port\n如\ngit config --global http.proxy socks5h://127.0.0.1:1080\n但这个方法对我无效\n参考ref gist github doc v2ex ","title":"通过设置代理解决github不能正常连通","uri":"/notes/github-proxy/"},{"content":" Typecho博客系统中的Sakura主题默认支持图片自动上传，但imgur默认访问有问题，故此设置一下完美支持imgur 原理分析 利用Cloudflare的worker搭建imgur反代 修改主题下相关文件 后台进行主题设置 添加反代地址 搭建反代 进入 Cloudflare 的 worker 界面，创建一个新的，删掉默认代码，用以下代码部署 addEventListener(\"fetch\", event =\u003e { let url = new URL(event.request.url); url.protocol = 'https:' url.hostname = \"i.imgur.com\"; let request = new Request(url, event.request); event.respondWith(fetch(request)); }) 将得到 https://foo.boo.workers.dev 的访问域名，到此将实现原本需要 https://i.imgur.com/Ch0lmFc.jpg 访问的变为只需要 https://foo.boo.workers.dev/Ch0lmFc.jpg 即可。 某些网络环境，workers.dev 域名支持不好，故此要绑定自定义个性化域名 在 worker 界面中的 Custom Domains，添加自定义域。你的 CF 账号下的任何一个域名都可以设置个二级子域名或三级，到此实现了 利用 https://yourdomain.name/Ch0lmFc.jpg 修改主题相关文件 文件路径 wp-contents/themes/sakura/inc/classes/Images.php 也可以在 wp 后台直接定位找到 对于 imgur 上传代码段进行小改动即可，上传逻辑和方法不变，只需要在最后生成的链接替换成我们搭建的反代域名链接 在这个上传接口代码块里面，找到上传成功后处理的代码，进行修改。 public function Imgur_API($image) { $upload_url = akina_option('imgur_upload_image_proxy'); $args = array( 'headers' =\u003e array( 'Authorization' =\u003e 'Client-ID ' . $this-\u003eimgur_client_id, ), 'body' =\u003e array( 'image' =\u003e base64_encode($image), ), ); $response = wp_remote_post($upload_url, $args); $reply = json_decode($response[\"body\"]); if ($reply-\u003esuccess \u0026\u0026 $reply-\u003estatus == 200) { $status = 200; $success = true; $message = \"success\"; $link = $reply-\u003edata-\u003elink; $newlink = parse_url($link,PHP_URL_PATH); $proxy = akina_option('cmt_image_proxy') . $newlink; } else { $status = $reply-\u003estatus; $success = false; $message = $reply-\u003edata-\u003eerror; $link = 'https://view.moezx.cc/images/2019/10/28/default_d_h_large.gif'; $proxy = akina_option('cmt_image_proxy') . $link; } $output = array( 'status' =\u003e $status, 'success' =\u003e $success, 'message' =\u003e $message, 'link' =\u003e $link, 'proxy' =\u003e $proxy, ); return $output; } 利用 php 内置函数 parse_url 进行处理 简单复习一下，官方函数说明 parse_url(string $url, int $component = -1): int|string|array|null|false 本函数解析 URL 并返回关联数组，包含在 URL 中出现的各种组成部分。数组的元素值不会 URL 解码。本函数不是用来验证给定 URL 的有效性的，只是将其分解为下面列出的部分。也会接受不完整或无效的 URL，parse\\_url() 会尝试尽量正确解析。 如以下代码 $url = 'http://username:password@hostname:9090/path?arg=value#anchor'; var_dump(parse_url($url)); var_dump(parse_url($url, PHP_URL_SCHEME)); var_dump(parse_url($url, PHP_URL_USER)); var_dump(parse_url($url, PHP_URL_PASS)); var_dump(parse_url($url, PHP_URL_HOST)); var_dump(parse_url($url, PHP_URL_PORT)); var_dump(parse_url($url, PHP_URL_PATH)); var_dump(parse_url($url, PHP_URL_QUERY)); var_dump(parse_url($url, PHP_URL_FRAGMENT)); 将输出 array(8) { [\"scheme\"]=\u003e string(4) \"http\" [\"host\"]=\u003e string(8) \"hostname\" [\"port\"]=\u003e int(9090) [\"user\"]=\u003e string(8) \"username\" [\"pass\"]=\u003e string(8) \"password\" [\"path\"]=\u003e string(5) \"/path\" [\"query\"]=\u003e string(9) \"arg=value\" [\"fragment\"]=\u003e string(6) \"anchor\" } string(4) \"http\" string(8) \"username\" string(8) \"password\" string(8) \"hostname\" int(9090) string(5) \"/path\" string(9) \"arg=value\" string(6) \"anchor\" 复习完拉。 这里只需要把上传成功的 url 中的 /path 提取出来，再与自定义反代域名拼接即可 处理过程： $newlink = parse_url($link,PHP_URL_PATH); = =$proxy = akina_option('cmt_image_proxy') . $newlink; 最后结果： if ($reply-\u003esuccess \u0026\u0026 $reply-\u003estatus == 200) { $status = 200; $success = true; $message = \"success\"; $link = $reply-\u003edata-\u003elink; $newlink = parse_url($link,PHP_URL_PATH); $proxy = akina_option('cmt_image_proxy') . $newlink; } 如图： 填入主题设置中的反代地址 把自定义反代域名完整 url 填入，刷新即可 参考链接： Sakura主题开源具体文件 Cloudflare worker反代 ","title":"利用cf搭建imgur反代 支持评论图片自动上传","uri":"/notes/cf-proxy.zh-cn/"},{"content":" 从一加 8 Pro 换到一加 Ace 2 Pro ，Android 还是折腾一下才好玩\n系统 一定在出厂版本要备份 全部分区 ，也就是俗称的字库~~~~ 还有不要用Fastboot Enhance 这个图形化软件，不清楚分区情况。一刷就寄了。血的教训啊，不然天天跑售后！\n2024.02.06 去常平售后刷回C13.411版本\n[x] 遗憾现在很少类原生rom\n回到出厂包 用这个 PJA110domestic_11_13.1.1.302CN01_2023072223340105.zip 用流出来的那个9008软件(windows平台)，回归到最原始包（真正的出厂状态）\n升级，然后解锁BL OTA升级到 color 13.1 552 ，重启到 fastboot 模式，flash oem unlock 解锁BL\nroot，再安装模块 一键root，再安装magisk hide，绕过银行类app\n照片 经常备份到 NAS（Network Attached Storage 网络附加存储），妈妈再也不用担心刷机\ngit 配置好，手机发博客 学习Liunx系统 ","title":"一加 Ace 2 Pro 折腾记录","uri":"/notes/oneplus-modify.zh-cn/"},{"content":"2023年双十一入手绿联DX4600+，果然人到中年真的开始折腾NAS了 希望用好这个机器，杜绝存储焦虑，过上舒服生活，其实是打工人 敢于做自己。\n照片 内网穿透 部署frp可以实现 绿联NAS部署frp 实现内网穿透\n私人影院 ","title":"买入绿联NAS","uri":"/notes/nas-setting/"},{"content":"这天我在惺忪睡梦中醒来，我看到一个月桂为冠的俊美青年，他静静地漫步而过，仿佛这是一个独自而在的无人之梦。\n哦，我轻叹这个充溢着桂月圣白的世界。我不知这是否也是一个梦境，但我无力破坏此缕恒静，我只愿此是恒梦。\n忘却了生活的烦恼，就连那循环的轮回也消失了，甚至孤独也消散了。此时此刻，我只闻内心定稳的平静和满足。\n重压之魔渐离了，方向消逝了，我只觉身体浮动在时空。此时此刻，自己幻为一片超然落叶，飘逸在这无声永恒。\n一个天使将我从漩涡中浮起，一个真理在我眼前蒙蒙浮现。此时此刻，一个自己看到三人静立在纯净的淡蓝天空。\n疲惫的粒子停止了爱恨，机械的齿轮失去了魔力。宁静蚀来，一丝莱雅的悠扬，整个世界都浸入了这淡淡的迷醉。\n芳香远去，内心燃起一个火苗——我想高声地呼喊，我想紧紧地拥抱，我想深深地热吻——随即被一缕微风治愈。\n","title":"阿波罗","uri":"/aphorism/apollo/"},{"content":"1\n这是一篇乔治·奥威尔名作，可能我们对他的《1984》更为耳熟，但相比而言我更喜欢这部《动物农场》。为什么呢？可能我现在年轻，经历少，思维比较简单，所以这篇没有性描述的童话故事更合我现在的胃口。\n这个故事不长，如果你尚未阅读，我建议你找个时间一口气读完。这个故事讲的是什么呢？大概就是一群农场内被人剥削的动物革命推翻农场主后却被之中的伟大领袖猪——这个独裁者——继续剥削的故事。这样一个故事，作者的写作动机是批判当时的苏联以及其伟大领袖斯大林，但这个故事的价值却不会随着苏联的解体而消失。\n社会的阶级是一直存在的，无论是远古还是现代，无论是资本还是共产，这是人类社会的本性。形而上地来说，存在的本质是逆熵。文明，也是如此，故其本性就是不平均——因为平均等于混乱等于非文明等于不存在。政治伦理地来说，若将平等定义为正义，那么平均意义上的平等维护了社会的正义，却同时也违背了个人的正义——个人视角上的平均等于不平等也即不正义。从发展来说，平均意义上的平等会扼杀个人动力，进而导致社会成为一潭死水。因此，尽管不平等程度是评价一个社会好坏的标准，但其绝对不是唯一的标准。这也就是说，无论一个社会的制度╱主义是什么，其根本上都无法解决不平等的问题，其根本上都无法解决极权的问题，其根本上都无法解决独裁者的问题——这是人类社会，也即文明的本性。2\n哲学之所以为哲学，就在于哲学要在循环之外探求一个最终解。所以，我想问题的关键不是如何去推翻，而是如何去更好地管理。如何减少极权和独裁者对社会的危害呢？将权力交给一个绝对正义的第三者——人工智能？我想这更不可能让人接受。构建一个去中心化的社会制度？可惜的是，人类是一个中心化的组织，这无法改变。一个去中心化的组织就如共产主义，其无法避免极权的问题，甚至因为其「理性统一性」而更容易导致极权。我们也可以将共产主义和无法避免的中心化这两个条件作为基础，设想一下实现了这样的社会是个怎样的社会——博格立方体——由控制到终极控制——同化。这样的社会是正义的吗？我想，该社会的「理性统一性」肯定会将这个问题定义为一个完整的句号，而非开放的问号。能够用问号去质疑，这点其实是非常重要的，因为在极权和独裁者眼中，这是绝对禁止的——因为言论自由是极权和独裁者的要害。\n如果说国家是一个大写的人，那么共产主义就如人的偏激状态，而人在短暂的偏激之后总是会后悔。当然，我并不是说每个人都应该去反对共产主义，因为这种「理性统一性」本身也是一种偏激。人类社会应该要有多样性，人类社会不能臣服于「绝对理性」。我们知道，科学是现代社会的「第一推动」，而科学的兴起是与宗教的衰弱相伴随的，但我们能否说科学已经杀死了宗教呢？我想，答案肯定是否定的，科学只杀死了宗教的不科学部分。宗教其它部分依然存在且影响巨大，即使在现代社会，科学依然要屡屡让步于宗教伦理，因为科学无法解决科学之外的问题，因为将自己化为唯一的权威不是科学的精神，因为并非每个人都信仰科学。社会制度的选择也类似，我们应该秉承一种科学的精神，让每个人都要有选择的权利。\n我想，科学之中是有唯一的标准的，其正确性可以通过数学的推导来证明，但是社会之中是否也有这样可证明判定的唯一标准呢？不用问我，我也不知道。但我想，如果其存在并践行，那么这样的「理性统一性」的社会是一个好的社会吗？毕竟，无法判定的论点，永远存在的分歧，在一定程度上的确是一个需解决的效率问题。但无论如何，这个问题，未来终究会有个结果的，因为时间总是单向地将我们推向未来。\n图源：https://twitter.com/coldplayxtra/status/1237845975521091586 ↩︎\n纠正：https://t.me/yixiuer/993 ↩︎\n","title":"《动物农场》","uri":"/notes/animal-farm/"},{"content":"「大自然」，也就是上帝用以创造和治理世界的艺术，也像在许多其它事物上一样，被人的艺术所模仿，从而能够制造出人造的动物。由于生命只是肢体的一种运动，它的起源在于内部的某些主要部分，那么我们为什么不能说，一切像钟表一样用发条和齿轮运行的「自动机械结构」也具有人造的生命呢？是否可以说它们的「心脏」无非就是「发条」，「神经」只是一些「游丝」，而「关节」不过是一些齿轮，这些零件如创造者所意图的那样，使整体得到活动的呢？艺术则更高明一些：它还要模仿有理性的「大自然」最精美的艺术品——「人」。因为号称「国民的整体」或「国家」（拉丁语为 Civitas）的这个庞然大物「利维坦」是用艺术造成的，它只是一个「人造的人」；虽然它远比自然人身高力大，而是以保护自然人为其目的；在「利维坦」中，「主权」是使整体得到生命和活动的「人造的灵魂」；官员和其他司法、行政人员是人造的「关节」；用以紧密连接最高主权职位并推动每一关节和成员执行其任务的「赏」和「罚」是「神经」，这同自然人身上的情况一样；一切个别成员的「资产」和「财富」是「实力」；人民的安全是它的「事业」；向它提供必要知识的顾问们是它的「记忆」；「公平」和「法律」是人造的「理智」和「意志」；「和睦」是它的「健康」；「动乱」是它的「疾病」，而「内战」是它的「死亡」。最后，用来把这个政治团体的各部分最初建立、联合和组织起来的「公约」和「盟约」也就是上帝在创世时所宣布的「命令」，那命令就是「我们要造人」。\n为了论述这个人造人的本质，我们将考虑：\n第一、它的制造材料和它的创造者；这二者都是人。\n第二、它是怎样和用什么「盟约」组成的；什么是统治者的「权利」、「正当的权力」或「权威」，以及什么是保存它和瓦解它的原因。\n关于第一点，有一句近来被滥用的俗话：说是「智慧」不是从「读书」得来的，而是从了解「人」得来的。因此，那些大多数无法显示自己聪明的人就很喜欢背后互相进行恶毒攻击，以显示他们自为已在人们身上了解到的东西。但另有一句近来尚未为人懂得的俗话则是他们正应该照它来真正学会互相了解，如果他们愿意勉为其难的话；而那就是认识你自己。这句话并不像现在所应用的那样意味着支持有权势者对地位卑微的人的野蛮态度；也不意味着鼓励低下阶层的人对地位高于自己的人的那种不逊举动，而是教导我们，由于一个人的思想感情与别人的相似，所以每个人对自己进行反省时，要考虑当他在「思考」、「构思」、「推理」、「希望」和「害怕」等等的时候，他是在做什么和他是根据什么而这样做的；从而他就可以在类似的情况下了解和知道别人的思想感情。我说的感情相似，是指人人都具有的，如「意愿」、「害怕」、「希望」等等；不是指感情对象的相似，即「所意愿」、「所害怕」和「所希望」等的对象的相似：因为个人的素质和各人所受的教育千差万别，所以被以伪装、欺骗、假造和谬论掩盖并混淆得像现在这样难于被人了解的人心的性质，只有探究人心的人才能了解。虽然有时我们也从人们的行动上看出他们的意向，但那么做而没有把它和我们自己的行动作比较，没有区别可能使情况发生变化的环节，那就只会是抓不住要点的猜测，而且在大多数情况下会由于过于相信或过于猜疑而失误；因为从事了解的人本身可以是好人，也可以是坏人。\n让人们不要完全根据别人的行动来了解别人吧，这种办法只能适用于他们所熟识的人，而那是为数不多的。要统治整个国家的人就必须从自己的内心进行了解而不是去了解这个或那个个别的人，而是要了解全人类。这样做起来虽然有困难，难度胜过学任何语言或学科学；但是当我明晰地系统论述了我自己的了解办法后，留下的另一个困难，只须考虑他自己内心是否还不是那么一回事。因为这类理论是不容许有别的验证的。1\n付邦　译\n霍布斯：《利维坦》（黎思复、黎延弼译，杨昌裕校），商务印书馆，1985 年版，引言。 ↩︎\n","title":"霍布斯：利维坦","uri":"/life/thomas-hobbes-leviathan/"},{"content":"古代中国封建王朝带给近代中国的落后，西方黑暗中世纪带给世人的阴影，更不用说那些美洲土地上已被灭绝的部落，这一个个悲剧的背后，都有着一个黑影——中心化。\n中心化的集权管理一直是人类的管理方式，小到家庭，大到国家。尽管官僚与享乐一直是其致命的弊端，它们使得管理变得低效甚至毁灭，但它却一直是人类的管理方式。究其根本，是因为没有了中心化的管理，人类社会只会变成一盘散沙、一潭烂泥，互联网世界中的例子就是暗网、零网等。虽然它们防审查，保护了我们的隐私，但它们上面的内容却大部分是情色、暴力、犯罪等。你真的能忍受一个去中心化、完全自由的世界吗？人类必须要有一个中心化的集权组织管理，人类就是一个被控制欲控制的希腊悲剧。那么，如何从根本上解决这个问题？而不是靠一次又一次的悲剧来清洗弊端的积累？\n在与现实世界截然不同的互联网世界，似乎有削弱中心化的能力，其动力是来自遥远的文艺复兴的自由平等。互联网的世界，一直有一种去中心化的文化。一方面，互联网的世界应该是一个比现实世界更理想、更美好、更自由、更平等的世界，不应该有中心化的管理；一方面，中心化的互联网易受现实社会中的政府监管，而去中心化则让我们拥有隐私，让我们拥有自由平等；另外，互联网诞生之初就存在一种去中心化的架构（P2P1），这构成了一种技术基础。正是如此，在互联网世界，似乎总存在着对中心化的现实世界的某种反抗，暗网、零网等对审查的反抗，著名的种子分享下载站海盗湾对版权的反抗，比特币对由国家控制的传统货币的反抗……\n在互联网时代，会诞生一种新的去中心化的管理架构吗？至少，比特币的巨大影响及其带来的区块链技术让我们看到了可能性。不过，我们先来看看连比特币都要受其影响的一种模式——开源模式。就其特点来说，开源模式一定程度上集成了去中心化，它汇聚人人的力量，齐心创造了一个个奇迹，它最终必将证明：在软件行业，胜利属于开源，而非闭源的大教堂！开源的胜利，似乎也是自由平等的胜利，是文艺复兴的最终胜利，大教堂必将被自由平等推倒！那么，可以借鉴开源来创造一种新的去中心化的管理架构吗？且慢，虽然开源有一些去中心化的特点，但它依旧是一个中心化的架构，它仍需要管理者、领袖，它的内部依然存在众多分歧，甚至成为仇恨。回到比特币，它虽然让整个人类社会为之一震，但只停留在了对正统权威的一种挑战，而非颠覆。去中心化，任重而道远。\n未来，如何创造一种这样的管理架构，这种架构能将去中心化的优点融入中心化，甚至能通过某种耦合来抵消中心化与去中心化各自的弊端？2\n更多：https://en.wikipedia.org/wiki/Peer-to-peer ↩︎\n纠正：https://t.me/yixiuer/934 ↩︎\n","title":"集权管理与去中心化","uri":"/idea/centralization-and-decentralization/"},{"content":"\n首先，推荐威廉·吉布森的三部曲：《神经漫游者》、《零伯爵》、《重启蒙娜丽莎》。以下是我读完后对赛博朋克及其所描述的未来的理解。\n赛博朋克很大可能是未来，但什么是赛博朋克？赛博朋克不是重工业、高密度人口、资源稀缺，而是大众感官被解放，大众可以改造自己身体，感官与网络相连，人工智能以及大型企业控制。\n为什么说赛博朋克很大可能是未来呢？社会上层的生活可能是后来大众的生活，比如汽车，而且目前高度发达的商业化运作只会加快这一过程，比如手机的普及速度与汽车相比。那么，看看现在衣食无忧的社会上层，比如明星，最多见的就是吸毒与纵欲过度，就是为了感官的快感。未来呢，科技发展有很大可能让大众不工作都能衣食无忧，而当科技再将感官解放，想想未来的大众会不会也是如此呢？你可以想想自己周围那些百无聊赖的人，也可以看看《银翼杀手 2049》或 2017 年上映的《攻壳机动队》脑补场景，全息投影而非霓虹灯之下的紫红色糜烂生活。这是第一点：感官解放。尤瓦尔·赫拉利的《未来简史》中也有所提及，以及下一点。\n第二点：改造身体。整形美容目前已经很普及，但未来的改造可能功能性会更强，也会加入更多的电子机械元素。可能被第一点驱动，也可能被其它驱动（脑补漫威的电影）。另，这点的一些未来特性目前已经可以实现，但还没普及大众。\n第三点：感官与网络相连。这就有意思了，想想《黑客帝国》的尼奥，当他听墨菲斯说：「你其实活在矩阵（即吉布森笔下的赛博空间）中，而非现实。」尼奥压根无法接受，并肯定墨菲斯是个疯子。可如果现实中，突然有个人对你说这样的话，谁能接受呢？这是个有趣的哲学问题，并且存在诸多烧脑影片中，如：《盗梦空间》。另，这点目前已有一些初创公司，如 Elon Musk 的 Neuralink，试图实现脑机融合以对抗未来可能的人工智能威胁。这点还有一种不完全的实现方式：VR，可以参考电影《头号玩家》。\n第四点：人工智能。这是一个从图灵时代到现在人类一直在思考的问题，也是众多科幻大片中都共有的，如《黑客帝国》、《我，机器人》、《终结者》、《生化危机》等等。电影中的人工智能都是一个反面角色，试图控制人类社会，甚至消灭人类这种「低端物种」。有意思的是，我发现《生化危机》中的人工智能的第一次亮相场景及对话与吉布森笔下的一个片段简直相同。\n第五点：大型企业控制。想想现在的大型跨国企业，少数企业比大部分的国家都有钱。你可能会说：钱不等于权力。的确如此，但是目前最有活力的高科技都是在企业的控制之下，为什么有活力？因为商业，因为钱。企业要靠新技术垄断来挣钱，科学家渴望创造新的事物，而这也需要钱。如此，未来世界还会在政府的控制之下吗？有意思的是，很多科幻大片似乎都对此表示否定。另，关于此点，可以了解下威廉·吉布森的生活背景。\n最后，赛博朋克的世界总是光线昏暗的室内或阴雨天，看起来未来好像并不乐观。话题之外的思考：太空。\n","title":"赛博朋克：一种可能的未来","uri":"/idea/cyberpunk-a-possibility-of-future/"},{"content":"小时候斜望着夜空中的星光\n我要到那里去！\n你这样仰头笑着回答家长的问题——\n宝宝，\n你长大后想干什么呢？\n学会了阅读\n学会了书写\n于是你低头学习着那些深奥的知识\n我会是你的骄傲！\n你这样对家长许下了承诺\n学会了说话\n学会了行走\n于是你有了一些朋友\n友谊多么可贵！\n双手紧握\n你不学习对得起父母吗？\n你不努力对得起朋友吗？\n你不继续对得起那个跨越下面阶梯的自己吗？\n象牙塔开始质问哭泣的你\n于是你的双脚从窗户慢慢回缩\nLet me go\nPush my boat from the highest cliff to the sea below\nRocks awaiting\nYou wait a lifetime to be found\nNow my feet won’t touch the ground...1\n小时候侧着头遥指星空，我要去那！然后接受教育，接触社会，进入了自己的象牙塔，从此便在这一个维度上等待死亡，再也看不到那不在一线上的星空了。 ↩︎\n","title":"Now My Feet Won’t Touch The Ground","uri":"/poetry/now-my-feet-wont-touch-the-ground/"}]